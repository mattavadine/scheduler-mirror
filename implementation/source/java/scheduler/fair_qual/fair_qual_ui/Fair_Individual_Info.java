package scheduler.fair_qual.fair_qual_ui;

import javax.swing.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import edu.calpoly.csc.scheduler.model.db.Time;
import edu.calpoly.csc.scheduler.model.schedule.Schedule;
import scheduler.fair_qual.*;
import scheduler.*;
import scheduler.db.*;
import edu.calpoly.csc.scheduler.model.db.idb.*;
import edu.calpoly.csc.scheduler.model.db.cdb.*;
import edu.calpoly.csc.scheduler.model.db.ldb.*;
import edu.calpoly.csc.scheduler.model.schedule.*;

/***
 * Fair_Individual_Info is a popup window that
 * appears for FairUI.
 *
 * @author Alex Lindt (alindt@calpoly.edu)
 *
 */
public class Fair_Individual_Info extends javax.swing.JFrame {
    
    /** Creates new form Fair_Individual_Info */
    private Fair_Qual fair;
    private int index;
    private Schedule schedule;

    public Fair_Individual_Info(Fair_Qual current_info) {
        if(current_info != null) {
           fair = current_info;
           index = current_info.getIndex();
           schedule = current_info.getSchedule();
        }
        initComponents();
	     this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();




//THE ONLY PART OF THIS CLASS THAT MATTERS
//THE ONLY PART OF THIS CLASS THAT MATTERS
      jTable1.setModel(new javax.swing.table.AbstractTableModel() {

          String[] column_names = {
              "Class", "Time" , "Preference(Class)" , "Preference(Time)" , "Fairness"
          };

          /** All indices of each scheduled item that belong to the current instructor */
          private ArrayList<Integer> indices = fair.getScheduleItemIndices(index);

          public int getColumnCount() { return 5; }
          public int getRowCount() { return indices.size(); }
          public String getColumnName(int i) { return column_names[i]; }

          public Object getValueAt(int row, int col) {

             if(col == 0) 
             { //gets the name of the course
                return schedule.s.get(indices.get(row)).c.getCourseName(); 
             }
             else if(col == 1) 
             { //gets the start and end time of the course
                Time start = schedule.s.get(indices.get(row)).start;
                Time end = schedule.s.get(indices.get(row)).end;
                return new String(start.toString() + " - " + end.toString());
             }
             else if(col == 2) 
             { //gets the instructor's "desire" (1-10) to teach at the given time
                return new Integer(fair.getCurrentInstructor().getPreference(schedule.s.get(indices.get(row)).c));
             }
             else if(col == 3) 
             { //gets the instructor's "desire" (1-10) to teach the given class
               /*
                * TODO: TimePreference representation has changed drastically, 
                *       impacting how fair/qual should be evaluated, along with
                *       the generate algorithm. To resolve this until the author
                *       (Alex), has time, the following changes are made below:
                *
                *       THE TIME PREFERENCE USED IN CALC'ING IS JUST 5.
                */
                return new Integer (5);
                //return new Integer(fair.getCurrentInstructor().getPreference(schedule.s.get(indices.get(row)).start));
             }
             else 
             { //calculates the fairness value for that given class and time
               /*
                * TODO: TimePreference representation has changed drastically, 
                *       impacting how fair/qual should be evaluated, along with
                *       the generate algorithm. To resolve this until the author
                *       (Alex), has time, the following changes are made below:
                *
                *       THE TIME PREFERENCE USED IN CALC'ING IS JUST 5.
                */
                return new Integer (5);
                //return new Integer(10-(fair.getCurrentInstructor().getPreference(schedule.s.get(indices.get(row)).c    )  +
                                       //fair.getCurrentInstructor().getPreference(schedule.s.get(indices.get(row)).start))/2);
             }
          }
      });
      jScrollPane1.setViewportView(jTable1);
//THE ONLY PART OF THIS CLASS THAT MATTERS
//THE ONLY PART OF THIS CLASS THAT MATTERS

   /* It apparently matters twice as much? -Eric */


        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel1.setText("Instructor: " + fair.getInstructor(index).getFirstName() + " "
                                       + fair.getInstructor(index).getLastName());

        jLabel2.setText("This section shows detailed information about the selected instructor.");

        jLabel3.setText(" It lists every course and time that the professor received, and how");

        jLabel4.setText(" that affects their Fairness value.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fair_Individual_Info(null).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
