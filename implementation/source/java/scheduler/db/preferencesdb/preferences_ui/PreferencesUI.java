package scheduler.db.preferencesdb.preferences_ui;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import edu.calpoly.csc.scheduler.Scheduler;
import edu.calpoly.csc.scheduler.model.db.pdb.DaysForClasses;
import edu.calpoly.csc.scheduler.model.db.pdb.PreferencesDB;
import edu.calpoly.csc.scheduler.model.db.pdb.SchedulePreference;
import edu.calpoly.csc.scheduler.model.schedule.Week;
import edu.calpoly.csc.scheduler.view.desktop.MyView;

import scheduler.*;
import scheduler.generate.*;

import scheduler.db.*;
import scheduler.db.coursedb.*;
import scheduler.db.preferencesdb.*;
/**
 *
 * @author alindt
 */
public class PreferencesUI extends MyView implements Observer {


    /** Creates new form PreferencesUI */
    public PreferencesUI() {
        initComponents();
        setListeners();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        Scheduler.pdb.addObserver(this);
        setTitle("Preferences");
        System.out.println("PDB is " + Scheduler.pdb.getDayPreferences());
    }
    
    class MyListDataListener implements ListDataListener {
      public void contentsChanged(ListDataEvent e) {
      }
      public void intervalAdded(ListDataEvent e) {
      }
      public void intervalRemoved(ListDataEvent e) {
      }
    }
    
    public void update(Observable o, Object arg) {
       /*dynamic_list.clear();
       preferences = new ArrayList<SchedulePreference>(Scheduler.pdb.getAllPreferences());
       dynamic_list.ensureCapacity(preferences.size());
         
       for(int i = 0 ; i < preferences.size() ; i++) {
         dynamic_list.addElement(preferences.get(i).name);
       }*/
    }

    public void setListeners() {
        day_createButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               makeDayPreference(evt);
            }
        });
        day_resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               resetDayPreference(evt);
            }
        });
        editButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               editPreference(evt);
            }
        });

        day_title.addKeyListener(new KeyListener() {
            public void keyPressed(KeyEvent keyEvent) {}
            public void keyReleased(KeyEvent keyEvent) { validateDayTitle(keyEvent); }
            public void keyTyped(KeyEvent keyEvent) {}
        });

        day_weight.addKeyListener(new KeyListener() {
            public void keyPressed(KeyEvent keyEvent) {}
            public void keyReleased(KeyEvent keyEvent) { validateDayWeight(keyEvent); }
            public void keyTyped(KeyEvent keyEvent) {}
        });

        m_toggle.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
               mAction(evt);
            }
        });
        t_toggle.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
               tAction(evt);
            }
        });
        w_toggle.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
               wAction(evt);
            }
        });
        r_toggle.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
               rAction(evt);
            }
        });
        f_toggle.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
               fAction(evt);
            }
        });
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               deletePreference(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weeks = new ArrayList<Week>();
        weights = new ArrayList<Integer>();
        M = false; T = false; W = false; R = false; F = false;
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        overlap_helpButton = new javax.swing.JButton();
        overlap_titleField = new javax.swing.JTextField();
        overlap_titleLabel = new javax.swing.JLabel();
        overlap_weightField = new javax.swing.JTextField();
        overlap_weightLabel = new javax.swing.JLabel();
        noOverlapButton = new javax.swing.JRadioButton();
        canOverlapButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        overlap_coursesList = new javax.swing.JList();
        overlap_coursesLabel = new javax.swing.JLabel();
        overlap_addButton = new javax.swing.JButton();
        overlap_createButton = new javax.swing.JButton();
        overlap_resetButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        day_title = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        m_toggle = new javax.swing.JToggleButton();
        t_toggle = new javax.swing.JToggleButton();
        w_toggle = new javax.swing.JToggleButton();
        r_toggle = new javax.swing.JToggleButton();
        f_toggle = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        day_weight = new javax.swing.JTextField();
        day_resetButton = new javax.swing.JButton();
        day_createButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        editButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        
        //LIST STUFF
         dynamic_list = new DefaultListModel();
         
         dynamic_list.addListDataListener(new MyListDataListener());
         
         /*
          * NOTE: The list of preferences currently only displays local DFC
          *       preferences
          */
         ArrayList<SchedulePreference> preferences = 
            new ArrayList<SchedulePreference>(Scheduler.pdb.getLocalDayPreferences());
 
         for(int i = 0 ; i < preferences.size() ; i++) {
            dynamic_list.addElement(preferences.get(i).name);
         }
         
         jList1 = new javax.swing.JList();
         jList1.setModel(dynamic_list);
        //LIST STUFF

        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 2, 11)); // NOI18N
        jLabel1.setText("Existing Preferences");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        overlap_helpButton.setText("?");

        overlap_titleLabel.setText("Preference Title:");

        overlap_weightLabel.setText("Weight (1-10):");

        noOverlapButton.setText("Cannot Overlap");

        canOverlapButton.setText("Can Overlap");

        overlap_coursesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(overlap_coursesList);

        overlap_coursesLabel.setText("Courses");
        overlap_coursesLabel.setFont(new java.awt.Font("DejaVu Sans", 2, 11));
        overlap_coursesLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        overlap_addButton.setText("Add Course");

        overlap_createButton.setText("Create");

        overlap_resetButton.setText("Reset");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(overlap_titleLabel)
                        .addGap(18, 18, 18)
                        .addComponent(overlap_titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(overlap_coursesLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(overlap_weightLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noOverlapButton)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(overlap_createButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(overlap_resetButton))
                            .addComponent(overlap_weightField, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(overlap_addButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overlap_helpButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(overlap_titleLabel)
                            .addComponent(overlap_titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(overlap_weightLabel)
                            .addComponent(overlap_weightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(overlap_coursesLabel)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(overlap_addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(overlap_resetButton)
                                    .addComponent(overlap_createButton)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(overlap_helpButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(noOverlapButton)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Overlap", jPanel2);








        jLabel2.setText("Future Preferences go here as new tabs");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jLabel2)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("NYI", jPanel3);

        jButton1.setText("?");

        jLabel4.setText("Preference Title:");

        jLabel5.setText("Day Combination:");

        m_toggle.setText("M");

        t_toggle.setText("T");

        w_toggle.setText("W");

        r_toggle.setText("R");

        f_toggle.setText("F");

        jLabel6.setText("Weight (0-10):");

        day_resetButton.setText("Reset Fields");

        day_createButton.setText("Create");

        


        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(4, 4, 4)
                                .addComponent(day_title))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(m_toggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_toggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(w_toggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(r_toggle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(f_toggle))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(day_weight)))
                        .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(day_createButton)
                        .addGap(18, 18, 18)
                        .addComponent(day_resetButton)
                        .addContainerGap(123, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(day_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(m_toggle)
                    .addComponent(t_toggle)
                    .addComponent(w_toggle)
                    .addComponent(r_toggle)
                    .addComponent(f_toggle))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(day_weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day_createButton)
                    .addComponent(day_resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Days", jPanel1);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        editButton.setText("View");

        jButton4.setText("Delete");

        jButton5.setText("?");

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel3.setText("Create Preferences");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editButton)
                        .addGap(21, 21, 21)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(jButton4)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Days");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action listener for the "DaysOfWeek" preference "create"
     * button. This will attempt to create the preference and
     * if there is any reason it cannot, an error message will
     * appear stating all the reasons that the preference was
     * not possible to create. Title texts for invalid fields
     * will additionally turn red until any change is made to
     * that field.
     *
     * Pre: All DaysOfWeek fields are filled in with valid data
     *      ---Title : Any string with at least 1 character of non
     *                 white space. It must also not be a currently
     *                 existing preference.
     *      ---Days  : At least one day must be selected for the
     *                 preference.
     *      ---Weight: Must be an integer between 1 and 10 inclusive
     *
     * Post: All fields are cleared and a DaysOfWeek preference is
     *       added to the database matching the given input.
     *
     */
    private void makeDayPreference(ActionEvent evt) {
        Week week_pref = new Week();
        String error_dialog = "";
        String title = day_title.getText().trim();
        int weight = -1, error_count = 0;

        if( title.equals("") ) {
            jLabel4.setForeground(Color.RED);
            error_dialog += (++error_count) + ". Cannot Create a preference without a title.\n";
        }
        else if( dynamic_list.contains(title) ) {
            jLabel4.setForeground(Color.RED);
            error_dialog += (++error_count) + ". That title already exists.\n";
        }

        if( !M && !T && !W && !R && !F ) {
            jLabel5.setForeground(Color.RED);
            error_dialog += (++error_count) + ". One or more days must be selected.\n";
        } else {
            if(M){week_pref.add(Week.MON);}     if(T){week_pref.add(Week.TUE);}
            if(W){week_pref.add(Week.WED);}     if(R){week_pref.add(Week.THU);}
            if(F){week_pref.add(Week.FRI);}
        }

        try {
            weight = Integer.parseInt(day_weight.getText().trim());
            if(weight < 0 || weight > 10) {
               throw new NumberFormatException();
            }
        } catch (Exception e) {
            jLabel6.setForeground(Color.RED);
            error_dialog += (++error_count) + ". Weight must be an integer between 0 and 10 (inclusively).\n";
        }
        /*
         * NOTE: This currently adds to the -local- DFC's in the PDB. In the
         *       future, we'll probably need different GUI's to allow the user
         *       to add to either database as they want. 
         *
         *     -Eric
         */
        if(error_count == 0) 
        {
            dynamic_list.addElement(title);

            try
            {
                Scheduler.pdb.addLocalDaysForClasses(new DaysForClasses(title, weight, week_pref));
            }
            catch (PreferencesDB.PreferenceExistsException e)
            {
               System.err.println ("A redundant check somehow failed the " + 
                                   "second time");
               e.printStackTrace();
            }
            System.out.println("Doing SQL STUFF.");
            System.out.println("----------------------------------------");
            System.out.println("Preference title: " + day_title.getText().trim());
            System.out.println("Days: " + week_pref.toString());
            System.out.println("Weight: " + Integer.parseInt(day_weight.getText().trim()));
            System.out.println("----------------------------------------");
               
            resetFields();
        } else {
            String error_title = "Day Preference Error";
            if(error_count > 1) { error_title += "s"; }
            JOptionPane.showMessageDialog(null,
                                          error_dialog,
                                          error_title,
                                          JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Clears all "DaysOfWeek" input fields.
     *
     * Pre: no-precondition necessary.
     *
     * Post: All possible input fields for "DaysOfWeek"
     *       preference creation are empty.
     *       (Title = "", Weight = "", all days = unselected)
     */
    private void resetDayPreference(ActionEvent evt) {
       resetFields();
    }
    
    private void editPreference(ActionEvent evt) {
/*      int weight = db_pref.getImportance();
      day_title.setText(title);
      day_weight.setText("" + weight);
  */        
/*
      if(db_pref instanceof DaysForClasses) {
         DaysForClasses dayPref = (DaysForClasses)db_pref;
         int weight = dayPref.getImportance();
         day_title.setText(title);
         day_weight.setText("" + weight);
         if(dayPref.days.contains(Week.MON)) { m_toggle.setSelected(true); }
         if(dayPref.days.contains(Week.TUE)) { m_toggle.setSelected(true); }
         if(dayPref.days.contains(Week.WED)) { m_toggle.setSelected(true); }
         if(dayPref.days.contains(Week.THU)) { m_toggle.setSelected(true); }
         if(dayPref.days.contains(Week.FRI)) { m_toggle.setSelected(true); }
      }*/
    }

    /**
     * Deletes the preference at the selected index of
     * the list of preferences. The preference is removed
     * from the db as well.
     *
     * Pre: A preference must be selected in the list.
     *
     * Post: List.remove(index); List.size --; db.remove(selected pref);
     */
    private void deletePreference(ActionEvent evt) {
       int index = jList1.getSelectedIndex();
       String name = (String)dynamic_list.get(index);

       if(index == -1) {
          JOptionPane.showMessageDialog(null,
                                        "Must have a preference selected to delete it",
                                        "Deletion Error",
                                        JOptionPane.ERROR_MESSAGE);
       }
       else {
          Vector<SchedulePreference> prefs = Scheduler.pdb.getAllPreferences();
          Iterator iterator = prefs.iterator();
          while (iterator.hasNext()) {
             SchedulePreference p = (SchedulePreference) iterator.next();
             if ((p.name).compareTo(name) == 0) {
                System.out.println(p.name);
                Scheduler.pdb.removePreference( p );
             }
          }
       }
    }
   
    /**
     * If any action is done to the DayWeight textfield
     * then set the text for that field to be the
     * default color, black.
     */
    private void validateDayWeight(KeyEvent evt) {
      jLabel6.setForeground(Color.BLACK);
    }

    /**
     * If any action is done to the DayTitle textfield
     * then set the text for that field to be the
     * default color, black.
     */ 
    private void validateDayTitle(KeyEvent evt) {
      jLabel4.setForeground(Color.BLACK);
    }
    
    /**
     * Action listener for the "M" button, deals with
     * changing text color and setting the variables
     * that represent the button.
     */
    private void mAction(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            M = true;
            if(jLabel5.getForeground().equals(Color.RED)) {
               jLabel5.setForeground(Color.BLACK);
            }
        } else {
            M = false;
        }
    }

    /**
     * Action listener for the "T" button, deals with
     * changing text color and setting the variables
     * that represent the button.
     */
    private void tAction(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            T = true;
            if(jLabel5.getForeground().equals(Color.RED)) {
               jLabel5.setForeground(Color.BLACK);
            }
        } else {
            T = false;
        }
    }

    /**
     * Action listener for the "W" button, deals with
     * changing text color and setting the variables
     * that represent the button.
     */
    private void wAction(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            W = true;
            if(jLabel5.getForeground().equals(Color.RED)) {
               jLabel5.setForeground(Color.BLACK);
            }
        } else {
            W = false;
        }
    }

    /**
     * Action listener for the "R" button, deals with
     * changing text color and setting the variables
     * that represent the button.
     */
    private void rAction(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            R = true;
            if(jLabel5.getForeground().equals(Color.RED)) {
               jLabel5.setForeground(Color.BLACK);
            }
        } else {
            R = false;
        }
    }

    /**
     * Action listener for the "F" button, deals with
     * changing text color and setting the variables
     * that represent the button.
     */
    private void fAction(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            F = true;
            if(jLabel5.getForeground().equals(Color.RED)) {
               jLabel5.setForeground(Color.BLACK);
            }
        } else {
            F = false;
        }
    }

    /**
     * Sets all "DaysOfWeek" fields to their base values
     *
     * Pre: none
     *
     * Post: Title = ""; Weight = ""; Alldays = unselected;
     */
    private void resetFields() {
       day_title.setText("");
       day_weight.setText("");
       m_toggle.setSelected(false);
       t_toggle.setSelected(false);
       w_toggle.setSelected(false);
       r_toggle.setSelected(false);
       f_toggle.setSelected(false);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreferencesUI().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ArrayList<Week> weeks;
    private ArrayList<Integer> weights;
    private ArrayList<SchedulePreference> preferences;
    private boolean M,T,W,R,F;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton day_resetButton;
    private javax.swing.JButton day_createButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField day_title;
    private javax.swing.JTextField day_weight;
    private javax.swing.JToggleButton m_toggle;
    private javax.swing.JToggleButton t_toggle;
    private javax.swing.JToggleButton w_toggle;
    private javax.swing.JToggleButton r_toggle;
    private javax.swing.JToggleButton f_toggle;
    private DefaultListModel dynamic_list;
    private javax.swing.JRadioButton canOverlapButton;
    private javax.swing.JRadioButton noOverlapButton;
    private javax.swing.JButton overlap_addButton;
    private javax.swing.JLabel overlap_coursesLabel;
    private javax.swing.JList overlap_coursesList;
    private javax.swing.JButton overlap_createButton;
    private javax.swing.JButton overlap_helpButton;
    private javax.swing.JButton overlap_resetButton;
    private javax.swing.JTextField overlap_titleField;
    private javax.swing.JLabel overlap_titleLabel;
    private javax.swing.JTextField overlap_weightField;
    private javax.swing.JLabel overlap_weightLabel;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
