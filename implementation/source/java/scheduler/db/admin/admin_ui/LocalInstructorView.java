/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CourseView.java
 *
 * Created on Jan 24, 2010, 5:31:34 PM
 */

package scheduler.db.admin.admin_ui;

import scheduler.db.admin.admin_ui.InstructorTimePrefs;
import scheduler.db.instructordb.*;
import scheduler.*;
import scheduler.menu.schedule.*;
import javax.swing.*;

import edu.calpoly.csc.scheduler.Scheduler;
import edu.calpoly.csc.scheduler.model.db.idb.Instructor;
import edu.calpoly.csc.scheduler.model.db.idb.InstructorDB;
import edu.calpoly.csc.scheduler.view.desktop.MyView;

import java.util.*;

/**
 *
 * This class allows us to work with the instructor database.
 * 
 * @author Jan Lorenz Soliman; Cedric Wienold
 */
public class LocalInstructorView extends MyView implements Observer {


    /** Instructor database */
    private InstructorDB database = Scheduler.idb;

    /** Individual instructor */
    private Instructor instructor;

    // Variables declaration - do not modify
    private javax.swing.JButton AddInstructo;


    private javax.swing.JButton CoursePreferences;

    private javax.swing.JLabel Disabilities;

    private javax.swing.JButton EditInstructor;

    private javax.swing.JLabel Id;

    private javax.swing.JLabel Name;

    private javax.swing.JLabel Office;


    private javax.swing.JButton RemoveInstructor;




    private javax.swing.JButton TimePreferences;

    private javax.swing.JLabel WTUs;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList ViewList;
    private javax.swing.JLabel InstructorsLabel;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration
    /** Creates new form CourseView */
    public LocalInstructorView() {
        Scheduler.debug("In Local");
        database.addObserver(this);
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    private void AddInstructoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddInstructoActionPerformed
        // TODO add your handling code here:
        AddLocalInstructor addInstructor = new AddLocalInstructor();
        addInstructor.show(175, 175);
        System.out.println("In CourseView.AddCourseActionPerformed");
    }//GEN-LAST:event_AddInstructoActionPerformed
    private void CoursePreferencesActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (instructor != null) {
            InstructorCoursePreferences icp = new InstructorCoursePreferences(instructor);
            //icp.setVisible(true);
            icp.show(175, 175);
        }
        //new InstructorCoursePreferences(instructor).setVisible(true);
    }
    private void EditInstructorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditInstructorActionPerformed
        // TODO add your handling code here:
    	if (instructor != null) {
	        System.out.println("In CourseView.EditCourseActionPerformed");
	        EditLocalInstructor editI = new EditLocalInstructor(instructor);
	        //editI.setVisible(true);
           editI.show(175, 175);
    	}
    }//GEN-LAST:event_EditInstructorActionPerformed
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        AddInstructo = new javax.swing.JButton();
        EditInstructor = new javax.swing.JButton();
        RemoveInstructor = new javax.swing.JButton();
        Name = new javax.swing.JLabel();
        Id = new javax.swing.JLabel();
        WTUs = new javax.swing.JLabel();
        Office = new javax.swing.JLabel();
        Disabilities = new javax.swing.JLabel();
        TimePreferences = new javax.swing.JButton();
        CoursePreferences = new javax.swing.JButton();
        ViewList = new javax.swing.JList();
        InstructorsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        final ArrayList<String> names = new ArrayList<String>();
        Vector<Instructor> data = (Vector) database.getLocalData();
        if (data != null) {
            for (Instructor i: data ) {
               names.add(i.toString());
            }
        }


        jList1.setModel(new javax.swing.AbstractListModel() {
            //String[] strings = { "CPE 101", "CPE 102", "CPE 103", "CPE 225" };
            ArrayList<String> strings = names;
            public Object getElementAt(int i) { return strings.get(i); }
            public int getSize() { return strings.size(); }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
//        jScrollPane1.setViewportView(ScheduleMenu.iList);
        jScrollPane1.setViewportView(jList1);

        AddInstructo.setText("Add Instructor");
        AddInstructo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddInstructoActionPerformed(evt);
            }
        });

        EditInstructor.setText("Edit Instructor");
        EditInstructor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditInstructorActionPerformed(evt);
            }
        });

        RemoveInstructor.setText("Remove Instructor");
        RemoveInstructor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveInstructorActionPerformed(evt);
            }
        });

        Name.setText("Name: ");

        Id.setText("Id: ");

        WTUs.setText("WTUs:");

        Office.setText("Office: ");

        Disabilities.setText("Disabilities:");

        TimePreferences.setText("Time Preferences");
        TimePreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimePreferencesActionPerformed(evt);
            }
        });

        CoursePreferences.setText("Course Preferences");
        CoursePreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoursePreferencesActionPerformed(evt);
            }
        });

        ViewList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Name:", "ID:", "WTUs:", "Office:", "Disabilities:" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(ViewList);

        InstructorsLabel.setText("Instructors:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InstructorsLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CoursePreferences, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(TimePreferences, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(RemoveInstructor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(EditInstructor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(AddInstructo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InstructorsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddInstructo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditInstructor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveInstructor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TimePreferences)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CoursePreferences)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
        //System.out.println("Changing the list selection");
        if (!evt.getValueIsAdjusting()) {
            if (jList1.getSelectedValue() != null) {
               String selection = jList1.getSelectedValue().toString();
               instructor = database.getLocalInstructorByName(selection);
               Name.setText("Name: " + selection);
               Id.setText("Id: " + instructor.getId());
               WTUs.setText("WTUs: " + instructor.getMaxWTU());
               Office.setText("Office: " + instructor.getOffice().toString() );
               Disabilities.setText("Disabilities: " + instructor.getDisability());
               String[] strings = { "Name: " + selection, "Id: " + instructor.getId(), 
                                    "WTUs: " + instructor.getMaxWTU(), "Office: " + instructor.getOffice().toString(),
                                    "Disabilities: " + instructor.getDisability() };
               ViewList.setListData(strings);
            }
            else {
               instructor = null;
            }

        }
    }//GEN-LAST:event_instructorListValueChanged
    private void RemoveInstructorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveInstructorActionPerformed
        // TODO add your handling code here:
    	if (instructor != null) {
	        Instructor removed = instructor;
	        this.database.removeLocalInstructor(removed);
	        jList1.clearSelection();
	        System.out.println("In InstructorView.RemoveCourseActionPerformed");
    	}
    }//GEN-LAST:event_RemoveInstructorActionPerformed
    private void TimePreferencesActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
      if (instructor != null) {
    	   InstructorTimePrefs itp = new InstructorTimePrefs((Instructor) instructor);
    	   //itp.setVisible(true);
         itp.show(175, 175);
      }
    }
    /** Updates the view when the database changes
     *  @param obs The observable object
     *  @param obj The argument passed from the observable
     **/
    public void update(Observable obs, Object obj) {
        //database = Scheduler.cdb;
        database.addObserver(this);
        System.out.println("In Update");
        //this.initComponents();
        

        Name.setText("Name: ");
        Id.setText("Id: ");
        WTUs.setText("WTUs:");
        Office.setText("Office: ");
        Disabilities.setText("Disabilities:");
        
        final ArrayList<String> names = new ArrayList<String>();
        Vector<Instructor> data = (Vector) database.getLocalData();
        if (data != null) {
            for (Instructor i: data ) {
               names.add(i.toString());
            }
        }
        jList1.setModel(new javax.swing.AbstractListModel() {
            //String[] strings = { "CPE 101", "CPE 102", "CPE 103", "CPE 225" };
            ArrayList<String> strings = names;
            public Object getElementAt(int i) { return strings.get(i); }
            public int getSize() { return strings.size(); }
        });
        jScrollPane1.setViewportView(jList1);
    }

}
