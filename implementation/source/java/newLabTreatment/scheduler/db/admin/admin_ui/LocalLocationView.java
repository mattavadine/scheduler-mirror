/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LocalLocationView.java
 *
 * Created on Feb 21, 2010, 7:34:09 PM
 */

package scheduler.db.admin.admin_ui;

import java.util.*;
import javax.swing.*;
import scheduler.*;
import scheduler.db.*;
import scheduler.db.locationdb.*;
import scheduler.menu.schedule.*;

/**
 *
 * @author jsoliman
 */
public class LocalLocationView extends MyView implements Observer {

   

    /** The location database object. */
    LocationDB database = Scheduler.ldb;
    /** The individual location*/
    Location location;

    /** Creates new form LocalLocationView */
    public LocalLocationView() {
        database.addObserver(this);
        initComponents();
        update(null, null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    public void defaultFields() {
        BuildingNumber.setText("Building #:");
        RoomNumber.setText("Room #:");
        MaxOccupancy.setText("Max Occupancy: ");
        RoomType.setText("Room Type: ");
        ProvidedEquipment.setText("Provided Equipment: ");
    }

    /** Updates the view when the database changes
     *  @param obs The observable object
     *  @param obj The argument passed from the observable
     **/
    public void update(Observable obs, Object obj) {
        System.out.println("In Update");
        final ArrayList<String> names = new ArrayList<String>();
        ArrayList<Location> data = (ArrayList) database.getLocalData();
        if (data != null) {
            for (Location l: data ) {
               names.add(l.getBuilding() + "-" + l.getRoom() );
            }
        }

        jList1.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> strings = names;
            public int getSize() { return strings.size(); }
            public Object getElementAt(int i) { return strings.get(i); }
        });
        LocationList.setViewportView(jList1);
//        LocationList.setViewportView(ScheduleMenu.lList);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LocationList = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        BuildingNumber = new javax.swing.JLabel();
        RoomNumber = new javax.swing.JLabel();
        MaxOccupancy = new javax.swing.JLabel();
        RoomType = new javax.swing.JLabel();
        ProvidedEquipment = new javax.swing.JLabel();
        AddLocation = new javax.swing.JButton();
        EditLocation = new javax.swing.JButton();
        RemoveLocation = new javax.swing.JButton();
        AvailableTimesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ViewList = new javax.swing.JList();
        Locations = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);



        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " ", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        LocationList.setViewportView(jList1);
//        LocationList.setViewportView(ScheduleMenu.lList);


        BuildingNumber.setText("Building #:");

        RoomNumber.setText("Room #:");

        MaxOccupancy.setText("Max Occupancy: ");

        RoomType.setText("Room Type: ");

        ProvidedEquipment.setText("Provided Equipment: ");

        AddLocation.setText("Add Location");
        AddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLocationActionPerformed(evt);
            }
        });

        EditLocation.setText("Edit Location");
        EditLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditLocationActionPerformed(evt);
            }
        });

        RemoveLocation.setText("Remove Location");
        RemoveLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveLocationActionPerformed(evt);
            }
        });

        AvailableTimesButton.setText("Available Times");
        AvailableTimesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailableTimesButtonActionPerformed(evt);
            }
        });

        ViewList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Building #:", "Room #:", "Maximum Occupancy:", "Room Type:", "Provided Equipment:" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ViewList);

        Locations.setText("Locations:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Locations)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LocationList, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AvailableTimesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addGap(223, 223, 223))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RemoveLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addGap(223, 223, 223))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EditLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addGap(223, 223, 223))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addGap(223, 223, 223))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(Locations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LocationList, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AvailableTimesButton))))
        );

        pack();
    }// </editor-fold>          

    private void AddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLocationActionPerformed
        // TODO add your handling code here:
        new AddLocalLocation().show(175, 175);
        //new AddLocation().setVisible(true);
    }//GEN-LAST:event_AddLocationActionPerformed

    private void EditLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditLocationActionPerformed
        // TODO add your handling code here:
        new EditLocalLocation(location).show(175, 175);
        //new EditLocation(location).setVisible(true);
    }//GEN-LAST:event_EditLocationActionPerformed

    private void RemoveLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveLocationActionPerformed
        Location removed = location;
        this.database.removeLocalLocation(removed);
        jList1.clearSelection();
        defaultFields();
        System.out.println("In LocalLocationView.RemoveCourseActionPerformed");
    }//GEN-LAST:event_RemoveLocationActionPerformed

    private void AvailableTimesButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (location != null) {
            //new LocationAvailability((Location)ScheduleMenu.lList.selected).setVisible(true);
            new LocationAvailability(location).show(175, 175);

        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new LocalLocationView().setVisible(true);
            }
        });
    }


    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {

        if (!evt.getValueIsAdjusting()) {
            if (jList1.getSelectedValue() != null) {
               String selection = jList1.getSelectedValue().toString();
               location = database.getLocalLocation(selection);
               Scheduler.debug ("Location is " + location.toString());
               BuildingNumber.setText("Building #: " + location.getBuilding()); 
               RoomNumber.setText("Room #: " + location.getRoom());
               MaxOccupancy.setText("Max Occupancy: " + location.getMaxOccupancy());
               RoomType.setText("Room Type: " + location.getType());
               String reqEquip = "Provided Equipment: ";
               if (location.isSmartRoom() ) {
                  reqEquip = reqEquip + "Smartroom, ";
               }
               if (location.hasOverhead() ) {
                  reqEquip = reqEquip + "Overhead, ";
               }
               if (location.hasLaptopConnectivity() ) {
                  reqEquip = reqEquip + "Laptop Connectivity";
               }
               ProvidedEquipment.setText(reqEquip);
               String[] strings = { "Building #: " + location.getBuilding(), "Room #: " + location.getRoom(),
                                    "Maximum Occupancy: " + location.getMaxOccupancy(), "Room Type: "  + location.getType(),
                                    "Provided Equipment: " + reqEquip };
               ViewList.setListData(strings);
            }

        }
    }//GEN-LAST:event_instructorListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddLocation;
    private javax.swing.JButton AvailableTimesButton;
    private javax.swing.JLabel BuildingNumber;
    private javax.swing.JButton EditLocation;
    private javax.swing.JScrollPane LocationList;
    private javax.swing.JLabel MaxOccupancy;
    private javax.swing.JLabel ProvidedEquipment;
    private javax.swing.JButton RemoveLocation;
    private javax.swing.JLabel RoomNumber;
    private javax.swing.JLabel RoomType;
    private javax.swing.JList jList1;
    private javax.swing.JList ViewList;
    private javax.swing.JLabel Locations;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
