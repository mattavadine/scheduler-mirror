<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="GWTView">
  <property environment="env"/>
  <property name="debuglevel" value="source,lines,vars"/>
  <property name="target" value="1.6"/>
  <property name="source" value="1.6"/>
  <path id="GWTView.classpath">
    <pathelement location="war/WEB-INF/classes"/>
    <pathelement location="test-classes"/>
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>
  
  <target name="init">
    <mkdir dir="war/WEB-INF/classes"/>
    <mkdir dir="test-classes"/>
    <mkdir dir="instrumented-classes"/>
    <copy includeemptydirs="false" todir="war/WEB-INF/classes">
      <fileset dir="src">
      <exclude name="**/*.java"/>
      </fileset>
    </copy>
    <copy includeemptydirs="false" todir="test-classes">
      <fileset dir="test">
      <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean">
    <delete dir="war/gwtview"/>
    <delete dir="war/WEB-INF/classes"/>
    <delete dir="test-classes"/>
    <delete dir="instrumented-classes"/>
    <delete file="cobertura.ser"/>
  </target>
  
  <target depends="clean" name="cleanall"/>
  <target depends="build-subprojects,build-project" name="build"/>
  <target name="build-subprojects"/>
  
  <target depends="init" name="build-project">
    <echo message="${ant.project.name}: ${ant.file}"/>
    <javac debug="true" debuglevel="${debuglevel}" destdir="war/WEB-INF/classes" source="${source}" target="${target}">
      <src path="src"/>
      <classpath refid="GWTView.classpath"/>
    </javac>
    <javac debug="true" debuglevel="${debuglevel}" destdir="test-classes" source="${source}" target="${target}">
      <src path="test"/>
      <classpath refid="GWTView.classpath"/>
    </javac>
  </target>
  
  <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
    <copy todir="${ant.library.dir}">
      <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
    </copy>
    <unzip dest="${ant.library.dir}">
      <patternset includes="jdtCompilerAdapter.jar"/>
      <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
    </unzip>
  </target>
  
  <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    <antcall target="build"/>
  </target>
  
  <path id="project.class.path">
    <pathelement location="src"/>
    <pathelement location="war/WEB-INF/classes"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>
  
  <path id="test.class.path">
    <pathelement location="instrumented-classes"/>
    <path refid="project.class.path"/>
    <pathelement location="test-classes"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="test-classes" includes="**/*.jar"/>
  </path>
  
  <target name="test">
    <taskdef classpathref="test.class.path" resource="tasks.properties" />
    <cobertura-instrument todir="instrumented-classes">
      <fileset dir="war/WEB-INF/classes/scheduler/model" includes="**/*.class" />
    </cobertura-instrument>
    <junit fork="yes" haltonfailure="yes">
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
      <formatter type="plain" usefile="false" />
      <classpath refid="test.class.path" />
      <!--<batchtest>-->
        <!--<fileset dir="test-classes" includes="**/*Test.class" />-->
      <!--</batchtest>-->
      <test name="scheduler.model.ModelTestSuite" />
    </junit>
    <cobertura-report destdir="../testing/coverage" srcdir="src" />
    <!--cobertura-check totalbranchrate="100" totallinerate="100" /-->
  </target>
  
  <target name="gwtc" depends="build" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="war/WEB-INF/classes"/>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <!--<arg line="-style PRETTY"/>-->
      <arg line="-war"/>
      <arg value="war"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="-style"/>
      <arg value="PRETTY"/>
      <arg line=""/>
      <arg value="scheduler.view.web.Scheduler"/>
    </java>
  </target>
</project>

