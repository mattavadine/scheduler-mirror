package Harness;
use strict;
use warnings;
use 5.010;
use base qw(TAP::Harness);
use lib "./plib";

use ClassMaker;

use Data::Dumper;
use Cwd qw(abs_path);
use File::Find qw(find);
use Test::More tests => 1;

#################################
# RECEIVING ARGS FROM COMMAND LINE
#################################
my ($cpath, $test_classDir, $dest) = map { abs_path($_) } @ARGV;

#################################
# GATHERING ALL BASE FILES FOR COMPILATION
# 
# Will not have been generated by tests...this is the "implementation" 
# source code
#################################
my @javaFiles;
sub wanted
{
   push (@javaFiles, $File::Find::name) if /\.java$/;
}
find(\&wanted, ("$cpath/scheduler"));

###################################################################
#                            TESTING                              #
###################################################################

#
# Build all the classes which in the classpath. This way, subsequent tests won't
# have to reduild everything. If a test generates a file it'll need to execute,
# it'll have to build -only- that test.
#
$ClassMaker::CPATHS = [$cpath];
$ClassMaker::DEST   = $dest;
our $cm = ClassMaker->new
(
   files => \@javaFiles,
   mainClass => "scheduler.Scheduler", # Will not be used, but constructor wants
);

#
# Test that the build works, else we can't continue
#
eval 
{
   ok($cm->makeClassFiles(abs_path("harness_compile_errors")), 
       "Build of scheduler class files");
};
if ($@)
{
   BAIL_OUT("Couldn't build scheduler files under '$cpath'.\nError: $@");
}

my $harness = Harness->new(
{
   lib => [qw(./ ./plib)],          # Libraries tests will have in @INC
   color => 1,                      # Color output
#   failures => 1,                   # Only print failed tests
   verbosity => 1,
   #
   # Pass 3 args to each test via @ARGV: 
   #  - Absolute path to the top-level scheduler class path
   #  - Absolute path to the top-level directory where generated java files 
   #    should go
   #  - Absolute path to destination for compiled class files
   #
   test_args => [$cpath, $test_classDir, $dest],
});

#
# When ready for heavy testing, just do a "glob(t/*.t)"
#
$harness->runtests(glob("t/*.t"));
